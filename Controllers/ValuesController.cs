using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ASPNETCOREFORM.Models;
using Newtonsoft.Json;

namespace ASPNETCOREFORM.Controllers
{
    [Route("api/[controller]")]
    public class ValuesController : Controller
    {

        /*
        Instructions:
        Anywhere in the code containing [MyNameClass], change it
        to the name of the class you have defined in your Model.cs file.
         */

        // GET api/values
        [HttpGet]
        public List<Inventory> Get()
        {
            var data = new List<Inventory>();
            using (var db = new InventoryContext())
            {
                data = db.Inventories.ToList();
            }
            return data;

        }

        //Get api/values/5
        [HttpGet("{id}")]
        //this is getting the id from the database
        public List<Inventory> Get(int id)
        {
            var data = new List<Inventory>();
            using (var db = new InventoryContext())
            {
                data = db.Inventories.Where(x => x.InventoryId == id).ToList();

                {
                    return data;
                }

            }
        }

        //Get Api/Values/ +id Edit

        // [HttpGet("{id}")]

        // public string Get(int id)
        // {
        //     using (var db = new InventoryContext())
        //     {
        //         var inventory = db.Inventories.Where(m => m.InventoryId == id);
        //     }

        // }

        // POST api/values
        [HttpPost]
        public string Post([FromBody] Inventory value)
        {
            using (var db = new InventoryContext())
            {
                    if (value.InventoryId < 1)
                {
                    db.Inventories.Add(value);
                    db.SaveChanges();
                }
                else
                {
                    var record = db.Inventories.Where(x => x.InventoryId == value.InventoryId).First();

                    record.InventoryId = value.InventoryId;
                    record.Name = value.Name;
                    record.Description = value.Description;
                    record.Quantity = value.Quantity;

                    db.Inventories.Update(record);
                }
                    db.SaveChanges();
            }        
        
            return "Done";
        }

        //  // PUT api/values/5
        // [HttpPut("{id}")]
        // public void Put(int id, [FromBody]string value)
        // {
        //     /*
        //      You are going to format you request.
        //      /api/values/recordID
        //      Next, your data is going to be the object generated by the form.
        //      */
        // }


        // DELETE api/values/5
        [HttpDelete("{id}")]
        public string Delete(int id)
        {
            using (var db = new InventoryContext())
            {
                var inventoryItem = db.Inventories.Where(x => x.InventoryId == id);

                if (inventoryItem.Count() > 0)
                {
                    var inventoryItemRecord = inventoryItem.First();
                    db.Remove(inventoryItemRecord);
                    db.SaveChanges();

                    return "Done!";
                }
                else
                {
                    return "No Record Found";
                }
            }

        }
        /*
           Make sure to create a new instance of 
           inventoryContext. You may refer to your notes or gitbook.
           https://cn1109.gitbooks.io/saintermediate/content/dotnet-core-entityframework.html

           Look under the section: Updating the Values Controller to use Entity Framework
        */

    }
}